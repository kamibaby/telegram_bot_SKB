import os
from aiogram import Bot, Dispatcher, types, executor
from dotenv import load_dotenv
import requests

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

user_history = {}

def search_places(category, location="–ú–æ—Å–∫–≤–∞"):
    url = f"https://search-maps.yandex.ru/v1/"
    params = {
        "apikey": YANDEX_API_KEY,
        "text": category,
        "lang": "ru_RU",
        "ll": "37.618423,55.751244",  # –ú–æ—Å–∫–≤–∞, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        "type": "biz",
        "results": 5
    }
    response = requests.get(url, params=params)
    results = []
    if response.status_code == 200:
        data = response.json()
        for item in data["features"]:
            name = item["properties"]["CompanyMetaData"]["name"]
            address = item["properties"]["CompanyMetaData"].get("address", "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
            results.append(f"{name} ‚Äî {address}")
    else:
        results.append("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
    return results

@dp.message_handler(commands=["start", "help"])
async def help_command(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø PET Bot üêæ\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/grooming ‚Äì –Ω–∞–π—Ç–∏ –≥—Ä—É–º–∏–Ω–≥-—Å–∞–ª–æ–Ω—ã\n"
        "/vets ‚Äì –Ω–∞–π—Ç–∏ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ –∫–ª–∏–Ω–∏–∫–∏\n"
        "/shops ‚Äì –Ω–∞–π—Ç–∏ –∑–æ–æ–º–∞–≥–∞–∑–∏–Ω—ã\n"
        "/history ‚Äì –∏—Å—Ç–æ—Ä–∏—è —Ç–≤–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
    )
    await message.reply(text)

@dp.message_handler(commands=["grooming", "vets", "shops"])
async def search_command(message: types.Message):
    category = message.text[1:]
    results = search_places(category)
    
    user_id = str(message.from_user.id)
    user_history.setdefault(user_id, []).append(category)
    
    await message.reply("\n".join(results))

@dp.message_handler(commands=["history"])
async def show_history(message: types.Message):
    user_id = str(message.from_user.id)
    history = user_history.get(user_id, [])
    if history:
        await message.reply(f"–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤: {', '.join(history)}")
    else:
        await message.reply("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
